(when (equal system-type 'darwin)
  (setenv "PATH" (concat "/opt/local/bin:/usr/local/bin:" (getenv "PATH")))
  (push "/opt/local/bin" exec-path)
  (push "/usr/local/git/bin" exec-path))


(custom-set-variables
  '(py-pychecker-command "~/bin/pychecker.sh")
  '(py-pychecker-command-args (quote ("")))
  '(python-check-command "~/bin/pychecker.sh"))

(setq backup-directory-alist `(("." . "~/.saves")))
(setq load-path  (cons (expand-file-name "~/configs/emacs") load-path))
;; (setq c-basic-offset 2)
;; (setq c-tab-width 2)
;; (setq c-indent-level 2)
;; (setq c-brace-offset -2)
;; (setq c-brace-imaginary-offset 0)
;; (setq c-argdecl-indent 2)
;; (setq c-label-offset -2)
;; (setq c-continued-statement-offset 2)
;; (setq c-auto-newline nil)
;; (setq c-tab-always-indent nil)

(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-hook 'lua-mode-hook 'turn-on-font-lock)
(add-hook 'lua-mode-hook 'hs-minor-mode)


(setq mac-command-modifier 'meta)

;; (require 'cc-mode)
;; (defun my-build-tab-stop-list (width)
;;   (let ((num-tab-stops (/ 80 width))
;; 	(counter 1)
;; 	(ls nil))
;;     (while (<= counter num-tab-stops)
;;       (setq ls (cons (* width counter) ls))
;;       (setq counter (1+ counter)))
;;     (set (make-local-variable 'tab-stop-list) (nreverse ls))))
;; (defun my-c-mode-common-hook ()
;;   (setq tab-width 2) ;; change this to taste, this is what K&R uses :)
;;   (my-build-tab-stop-list tab-width)
;;   (setq c-basic-offset tab-width)
;;   (setq indent-tabs-mode nil)) ;; force only spaces for indentation
;; (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; (require 'cc-mode)
;; (defun my-build-tab-stop-list (width)
;;   (let ((num-tab-stops (/ 80 width))
;; 	(counter 1)
;; 	(ls nil))
;;     (while (<= counter num-tab-stops)
;;       (setq ls (cons (* width counter) ls))
;;       (setq counter (1+ counter)))
;;     (set (make-local-variable 'tab-stop-list) (nreverse ls))))
;; (defun my-c-mode-common-hook ()
;;   (setq tab-width 2) ;; change this to taste, this is what K&R uses :)
;;   (my-build-tab-stop-list tab-width)
;;   (setq c-basic-offset tab-width)
;;   (setq indent-tabs-mode nil)) ;; force only spaces for indentation
;; (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; (c-set-offset 'substatement-open 0)
;; (c-set-offset 'case-label '+)
;; (c-set-offset 'arglist-cont-nonempty '+)
;; (c-set-offset 'arglist-intro '+)
;; (c-set-offset 'topmost-intro-cont '+)

(when (equal system-type 'darwin)
  (setenv "PATH" (concat "/opt/local/bin:/usr/local/bin:" (getenv "PATH")))
  (push "/opt/local/bin" exec-path))

(require 'git)
(require 'git-blame)
(require 'php-mode)

(setq auto-mode-alist (cons '("\\.h$" . c++-mode) auto-mode-alist))
(require 'protobuf-mode)

(setq mac-option-modifier 'none)

(global-set-key "\C-c\C-c" 'compile) ; formerly undef (text-mode)

(add-hook 'find-file-hook 'flymake-find-file-hook)
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-inplace))
       (local-file (file-relative-name
            temp-file
            (file-name-directory buffer-file-name))))
      (list "~/bin/pychecker.sh"  (list local-file))))
   (add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" flymake-pyflakes-init)))
(load-library "flymake-cursor")
(global-set-key [f10] 'flymake-goto-prev-error)
(global-set-key [f11] 'flymake-goto-next-error)
